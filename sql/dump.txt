How To Import and Export Databases in MySQL or MariaDB
PostedDecember 21, 2016 353.2k views MYSQL MARIADB DATABASES BACKUPS CENTOS DEBIAN UBUNTU UBUNTU 16.04
 mati
Mateusz Papiernik
Introduction
Being able to import and export your database is an important skill to have. You can use data dumps for backup and restoration purposes, allowing you to recover older copies of your database in case of an emergency. You can also use them to migrate data to a new server or development environment.

Working with database dumps in MySQL and MariaDB is fairly straightforward. This tutorial will cover how to export the database as well as import it from a dump file in MySQL and MariaDB.

Prerequisites
To import and/or export a MySQL or MariaDB database, you will need:

Access to a Linux server running MySQL or MariaDB
The database name and user credentials for it
Exporting the Database
The mysqldump console utility is used to export databases to SQL text files, making it relatively easy to transfer and move around. You will need the database name itself as well as the username and password to an account with privileges allowing at least full read only access to the database.

Export your database using the following command structure:

mysqldump -u username -p database_name > data-dump.sql



mysqldump -u root -p db_amarcasarv1 > ../../../amarcasar/sql/db_amarcasarv1.sql





mysqldump -u root -p --routines db_amarcasarv1 > ../../../amarcasar/sql/db_amarcasarv1_dump.sql









mysqldump -u root -p --routines db_amarcasarv3 > ../../../amarcasar/sql/db_amarcasarv3_dump.sql





mysqldump -u root -p --routines db_amarcasarv3 > ../../../bemcasei/sql/db_amarcasarv3_dump.sql




mysqldump -u root -p --routines db_musicov1 > ../../../musicodevalor/sql/db_musicov1_dump.sql



mysqldump -u root -p --routines db_spa > ../../../ext2/sql/db_spa_dump2.sql



mysqldump -u root -p --routines db_spa > ../../../projetologin/sql/db_projetologin_dump.sql


SELECT COUNT(*) AS intTable
FROM information_schema.TABLES
WHERE TABLE_SCHEMA = 'db_amarcasarv1';

SELECT*
FROM information_schema.TABLES
WHERE TABLE_SCHEMA = 'db_amarcasarv1';

SELECT ROUTINE_TYPE, ROUTINE_NAME
FROM INFORMATION_SCHEMA.ROUTINES
WHERE ROUTINE_SCHEMA = 'nome do banco de dados aqui';



SELECT COUNT(*)
FROM INFORMATION_SCHEMA.COLUMNS
WHERE table_schema = 'db_amarcasarv1' AND
table_name = 'tb_customstyle';



Para que as stored procedures sejam enviadas para o dump, você deve passar o parâmetro –routines para o mysqldump. Por exemplo:

# mysqldump --routines nome-banco

PS: Só lembrando um detalhe, as triggers são geradas no dump por padrão.

Caso você deseje gerar no dump somente das stored procedures do seu banco de dados, como foi o que aconteceu no meu caso, pois na minha migração faltou somente as procedures, use o comando abaixo:

# mysqldump --triggers=false --routines --no-create-info --no-data --no-create-db nome-banco > rotinas.sql

O arquivo rotinas.sql vai conter somente as stored procedures do seu banco de dados nome-banco. É só importá-las no banco de destino.







username is the username you can log in to the database with
database_name is the name of the database that will be exported
data-dump.sql is the file in the current directory that the output will be saved to
The command will produce no visual output, but you can inspect the contents of filename.sql to check if it's a legitimate SQL dump file by running the following command:

head -n 5 data-dump.sql
The top of the file should look similar to this, showing that it's a MySQL dump for a database named database_name.

SQL dump fragment
-- MySQL dump 10.13  Distrib 5.7.16, for Linux (x86_64)
--
-- Host: localhost    Database: database_name
-- ------------------------------------------------------
-- Server version       5.7.16-0ubuntu0.16.04.1
If any errors happen during the export process, mysqldump will print them clearly to the screen instead.

Importing the Database
To import an existing dump file into MySQL or MariaDB, you will have to create the new database. This is where the contents of the dump file will be imported.

First, log in to the database as root or another user with sufficient privileges to create new databases:

mysql -u root -p
This will bring you into the MySQL shell prompt. Next, create a new database with the following command. In this example, the new database is called new_database:

CREATE DATABASE new_database;
You'll see this output confirming that it was created.

Output
Query OK, 1 row affected (0.00 sec)
Then exit the MySQL shell by pressing CTRL+D. From the normal command line, you can import the dump file with the following command:

mysql -u username -p new_database < data-dump.sql



username is the username you can log in to the database with
newdatabase is the name of the freshly created database
data-dump.sql is the data dump file to be imported, located in the current directory
If the command runs successfully, it won’t produce any output. If any errors occur during the process, mysql will print them to the terminal instead. You can check that the database was imported by logging in to the MySQL shell again and inspecting the data. This can be done by selecting the new database with USE new_database and then using SHOW TABLES; or a similar command to look at some of the data.

Conclusion
You now know how to create database dumps from MySQL databases as well as how to import them again. mysqldump has multiple additional settings that may be used to alter how the dumps are created, which you can learn more about from the official mysqldump documentation page.